#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.Reflection;
using FastUnityCreationKit.Data.Interfaces;
using FastUnityCreationKit.Utility.Attributes;
using UnityEditor;
using UnityEditor.Search;
using UnityEngine;

namespace FastUnityCreationKit.Utility.Editor.Postprocessors
{
    [InitializeOnLoad]
    public static class AutomaticObjectCreator
    {
        static AutomaticObjectCreator()
        {
            // This is initialized inside unity editor 
            Dispatcher.Enqueue(PerformAutomaticObjectCreation);
        }

        private static void PerformAutomaticObjectCreation()
        {
            List<Type> objectsToFindOrCreate = new List<Type>();
            
            // Find all objects with AutoCreatedObjectAttribute
            for (int index = 0; index < AppDomain.CurrentDomain.GetAssemblies().Length; index++)
            {
                Assembly assembly = AppDomain.CurrentDomain.GetAssemblies()[index];
                
                // Get all types in assembly
                Type[] types = assembly.GetTypes();
                for(int i = 0; i < types.Length; i++)
                {
                    Type type = types[i];
                    
                    // Check if type has AutoCreatedObjectAttribute
                    AutoCreatedObjectAttribute attribute = (AutoCreatedObjectAttribute)Attribute.GetCustomAttribute(type, typeof(AutoCreatedObjectAttribute));
                    if (attribute == null) continue;
                    
                    if (type.IsAbstract || type.IsInterface)
                        continue;
                        
                    // Check if is scriptable object
                    if (!typeof(ScriptableObject).IsAssignableFrom(type))
                    {
                        // Log error 
                        Debug.LogError($"Type {type.Name} cannot be created as it is not a scriptable object. Skipping.");
                        continue;
                    }

                    objectsToFindOrCreate.Add(type);
                }
            }
            
            int nCreated = 0;
            
            // Create all objects  
            for (int i = 0; i < objectsToFindOrCreate.Count; i++)
            {
                Type type = objectsToFindOrCreate[i];
                AutoCreatedObjectAttribute attribute = (AutoCreatedObjectAttribute)Attribute.GetCustomAttribute(type, typeof(AutoCreatedObjectAttribute));
               
                // Check if attribute is null
                if (attribute == null) continue;
                
                string subDirectory = attribute.SubDirectory;
                
                // Check if root directory exists
                if (!AssetDatabase.IsValidFolder(LocalConstants.ROOT_PATH))
                    AssetDatabase.CreateFolder("Assets", "AutoGenerated");

                // Check if sub directory exists
                string[] splitDir = subDirectory.Replace('\\', '/').Split('/');

                string currentPath = LocalConstants.ROOT_PATH; 
                for (int j = 0; j < splitDir.Length; j++)
                {
                    currentPath = currentPath.TrimEnd('/'); 

                    // Create directory if it doesn't exist 
                    if (!AssetDatabase.IsValidFolder(currentPath + "/" + splitDir[j]))
                    {
                        AssetDatabase.CreateFolder(currentPath, splitDir[j]);
                        Debug.Log("Created folder: " + currentPath + "/" + splitDir[j]);
                    }
          
                    // Append new directory to path 
                    if (!currentPath.EndsWith('/')) currentPath += '/';
                    currentPath += splitDir[j];
                }

                // Ensure that the object type is a scriptable object
                if (!typeof(ScriptableObject).IsAssignableFrom(type))
                    throw new ArgumentException("Object type must be a scriptable object.");

                if(!currentPath.EndsWith('/'))
                    currentPath += '/';
            
                // Check if object already exists
                if (AssetDatabase.LoadAssetAtPath($"{currentPath}{type.Name}.asset", type) != null)
                    continue;
            
                // Create scriptable object  
                ScriptableObject obj = ScriptableObject.CreateInstance(type);
                
                // Save object
                AssetDatabase.CreateAsset(obj, $"{currentPath}{type.Name}.asset");
                nCreated++;
            }
            
            // Save assets
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

            if (nCreated > 0)
            {
                Debug.Log($"Created {nCreated} objects.");
                
                // Reload domain if objects were created
                // this allows for AddressableAssetsAssigner to create
                // groups and assign assets to them as otherwise
                // race conditions will occur.
                EditorUtility.RequestScriptReload();
            }
        }
    }
}
#endif